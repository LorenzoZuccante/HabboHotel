@model HabboHotel.Models.StoricoServiziAggiuntivi

@{
    Layout = "~/Views/Shared/_Layout.cshtml"; 
    ViewBag.Title = "Aggiungi Servizio alla Prenotazione";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Add", "ServiziAggiunti", FormMethod.Post, new { @class = "needs-validation", novalidate = "true" }))
{
    @Html.AntiForgeryToken()

    <div class="mb-3">
        @Html.LabelFor(model => model.PrenotazioneId, "Prenotazione", new { @class = "form-label" })
        @Html.DropDownListFor(model => model.PrenotazioneId, new SelectList(ViewBag.Prenotazioni, "PrenotazioneId", "DataPrenotazione"), "Seleziona una prenotazione", new { @class = "form-select" + (ViewData.ModelState.IsValidField("IdPrenotazione") ? "" : " is-invalid") })
        @Html.ValidationMessageFor(model => model.PrenotazioneId, "", new { @class = "invalid-feedback" })
    </div>

    <div class="mb-3">
        @Html.LabelFor(model => model.ServizioAggiuntivoId, "Servizio", new { @class = "form-label" })
        @Html.DropDownListFor(model => model.ServizioAggiuntivoId, new SelectList(ViewBag.Servizi, "ServizioAggiuntivoId", "TipoServizio"), "Seleziona un servizio", new { @class = "form-select" + (ViewData.ModelState.IsValidField("ServizioAggiuntivoId") ? "" : " is-invalid") })
        @Html.ValidationMessageFor(model => model.ServizioAggiuntivoId, "", new { @class = "invalid-feedback" })
    </div>

    <div class="mb-3">
        @Html.LabelFor(model => model.DataServizio, "Data del Servizio", new { @class = "form-label" })
        @Html.EditorFor(model => model.DataServizio, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local" } })
        @Html.ValidationMessageFor(model => model.DataServizio, "", new { @class = "invalid-feedback" })
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Aggiungi Servizio</button>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
